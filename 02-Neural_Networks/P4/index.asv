%   In this practice we implement with Adaline the same exercises as in
%   previous 3 Perceptron practices.
%% %% Adaline 1-Layer
% ============== In this section we initalize W and b values ==============
% Pattern declaration
p1 = [1; 2];
p2 = [-1; 1];
p3 = [0; -1];

P = [p1 p2 p3];
Ptrans = P';
T = [1 0 0];
[m, n] = size(P);
N = 1;

% Inilialize W and b with random values
W_old = rand(N,m);
b_old = rand(N,1);
%% 1-Layer Adaline: Training

% For this practice we test for 10 and 50 epochs
epochs = 50;
W_new = W_old;
b_new = b_old;

% Alfa
alfa = 0.1;
eStore = zeros(1, epochs * n);
% k is the index for storing the error
k = 1;

% Training with Adaline
for i = 1:epochs
    for j = 1:n     %n is number of patterns
        a = purelin(W_new * P(:,j) + b_new);
        
        e = T(j) - a;
        W_new =  W_new + alfa * e * Ptrans(j,:);
        b_new = b_new + alfa * e;
        
        eStore(k) = e;
        k = k + 1;
    end
    % Graphs for the error
    if(i == 10)
        
        s = 'Error Graph after 10 epochs.';

        figure(1)
        title(s) 
        hold on
        plot(1:length(eStore), eStore,'LineWidth',2.0);
        grid on
        hold off
    end
    if(i == 50)
        % Graph for the error
        s = strcat('Error Graph after ', num2str(epochs),' epochs.');

        figure(2)
        title(s) 
        hold on
        plot(1:length(eStore), eStore,'LineWidth',2.0);
        grid on
    end
end

% Graph for the error
% s = strcat('Error Graph after ', num2str(epochs),' epochs.');
% 
% figure(1)
% title(s) 
% hold on
% plot(1:length(eStore), eStore);
% grid on
%% 1-Layer Adaline: Evaluation from -3 < x < 3

x0 = -3:0.1:3;
y0 = -3:0.1:3;

% We obtain b with the following values of w11, w12, w21, w22
w = Wnew;
b = bnew;

figure(3)

title('1-Layer Adaline NN')
hold on

for i = 1:length(x0)
    for j = 1:length(y0)
        
         a = purelin(W_new * P(:,j) + b_new);
        if( a == 0)
            
            plot(x0(i) , y0(j), '*g')
        
        else
            plot(x0(i) , y0(j), '*m')
            
        end
        hold on
    end
end

grid on
xlim([-3 3])
ylim([-3 3])
